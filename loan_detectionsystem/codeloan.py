# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tRcGr4fJQgBVMzMrutsQkYO-GInnKj3p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("LoanApprovalPrediction.csv")

data.head(5)
obj=(data.dtypes=='object')
print("Categorical Variables:", len(list(obj[obj].index)))
data.drop(['Loan_ID'],axis=1,inplace=True)

obj = (data.dtypes == 'object')
objectcols = list(obj[obj].index)
plt.figure(figsize=(18,36))
index = 1

for col in objectcols:
  y = data[col].value_counts()
  plt.subplot(11,4,index)
  plt.xticks(rotation=90)
  sns.barplot(x=list(y.index), y=y)
  index +=1

from sklearn import preprocessing
labelencoder = preprocessing.LabelEncoder()
obj = (data.dtypes == 'object')
for col in list(obj[obj].index):
  data[col] = labelencoder.fit_transform(data[col])

obj = (data.dtypes == 'object')
print("Categorical variables:",len(list(obj[obj].index)))

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),cmap='BrBG',fmt='.2f',linewidths=2,annot=True)

sns.catplot(x="Gender", y="Married",hue="Loan_Status",kind="bar",data=data)

for col in data.columns:
  data[col] = data[col].fillna(data[col].mean())

data.isna().sum()

from sklearn.model_selection import train_test_split

X = data.drop(['Loan_Status'],axis=1)
Y = data['Loan_Status']
X.shape,Y.shape

Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y,test_size=0.4,random_state=1)
Xtrain.shape, Xtest.shape, Ytrain.shape, Ytest.shape

from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression

from sklearn import metrics

knn = KNeighborsClassifier(n_neighbors=3)
rfc = RandomForestClassifier(n_estimators = 7, criterion = 'entropy',random_state =7)
svc = SVC()
lc = LogisticRegression()

print("\nTraining set accuracy scores:\n")
for clf in (rfc, knn, svc,lc):
    clf.fit(Xtrain, Ytrain)
    Ypred = clf.predict(Xtrain)
    print("Accuracy score of ",clf.__class__.__name__,"=",100*metrics.accuracy_score(Ytrain,Ypred))

print("\nTesting set accuracy scores:\n")
for clf in (rfc, knn, svc,lc):
    clf.fit(Xtrain, Ytrain)
    Ypred = clf.predict(Xtest)
    print("Accuracy score of ",clf.__class__.__name__,"=",100*metrics.accuracy_score(Ytest,Ypred))

def predicteligibility():
    print("\nEnter the following details for loan eligibility prediction:")
    inputdata = []

    fields = [
        "Gender (0: Female, 1: Male)",
        "Married (0: No, 1: Yes)",
        "Dependents (0, 1, 2, 3+)",
        "Education (0: Not Graduate, 1: Graduate)",
        "SelfEmployed (0: No, 1: Yes)",
        "ApplicantIncome",
        "CoapplicantIncome",
        "LoanAmount",
        "LoanAmountTerm",
        "CreditHistory (0: No, 1: Yes)",
        "PropertyArea (0: Rural, 1: Semiurban, 2: Urban)"
    ]

    for field in fields:
        value = input(f"{field}: ")
        inputdata.append(float(value))

    inputdf = pd.DataFrame([inputdata], columns=X.columns)

    prediction = rfc.predict(inputdf)[0]
    predictiontext = "Eligible" if prediction == 1 else "Not Eligible"
    print(f"\nThe loan status for the entered record is: {predictiontext}")

predicteligibility()